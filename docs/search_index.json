[["index.html", "PIPO Project – WILD6900 Chapter 1 About", " PIPO Project – WILD6900 Nadav Mouallem 2023-03-17 Chapter 1 About This digital book written in Markdown for Reproducible Data Science (WILD6900). This book outlines elements of my PIPO project, which studies pinus ponderosa (Ponderosa pine, PIPO) regeneration and plant community composition after high severity reburn wildfires. The content involves the creation of relational databases in SQL and data visualization with ggplot2 in R. "],["database-design-and-structure.html", "Chapter 2 Database Design and Structure 2.1 Creating the Database Structure in R", " Chapter 2 Database Design and Structure The PIPO project is organized as a relational database, or a collection of related tables. My project has four interrelated tables: PLOTS : this table has all experimental plots, each with a unique plot_id. PIPO : this table has data on ponderosa pine regeneration. FUELS : this table has data on fuel loads in each plot, measured in different fuel classes. COMMUNITY : this table contains all plant community data, measured as percent cover. Fig 1. Diagram of the PIPO database. 2.1 Creating the Database Structure in R RSQLite was used in R to create the database in SQL. Below is the code used to create the database structure. To start, necessary packages were loaded and a connection for the database needs to be established. # load packages ---- library(DBI) # establish a connection with the database PIPO_db &lt;- dbConnect(RSQLite::SQLite(), &quot;/Users/nadav/Documents/USU/Thesis/MS/PIPO.db&quot;) After connection was established, time to make the Plots table. For this, the plot_id is the PRIMARY KEY, as it is a unique value for each plot. # creating the &#39;plots&#39; table dbExecute(PIPO_db, &quot;CREATE TABLE plots ( plot_id varchar(15) NOT NULL, x_coord double, y_coord double, severity varchar(5), PRIMARY KEY (plot_id) );&quot;) Next is the Fuels table. For this, transect is the PRIMARY KEY. # creating the &#39;fuels&#39; table dbExecute(PIPO_db, &quot;CREATE TABLE fuels ( transect varchar(15) NOT NULL, plot_id varchar(15), 1_hr double, 10_hr double, 100_hr double, 1000_hr double, duff_litter double, PRIMARY KEY (transect) );&quot;) Next, the PIPO table. For this, seedling_num is the PRIMARY KEY, which is a unique ID for each seedling measured. # creating the &#39;PIPO&#39; table dbExecute(PIPO_db, &quot;CREATE TABLE pipo ( seedling_num double NOT NULL, plot_id varchar(15), height_cm double, diam_cm double, azimuth double, position double, distance_cm double, PRIMARY KEY (seedling_num) );&quot;) Finally, the community table. For this, quad_number is the PRIMARY KEY, which is a unique ID for each plot monitored. # creating the &#39;community&#39; table dbExecute(PIPO_db, &quot;CREATE TABLE community ( quad_number double NOT NULL, plot_id varchar(15), species varchar(10), percent_cover double, PRIMARY KEY (quad_number) );&quot;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
